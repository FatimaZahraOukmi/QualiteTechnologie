<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        8f//z/H//8fD///AB///8A////5///////8=
</value>
  </data>
</root>